name: Update Challenge Version

on:
  push:
    branches:
      - main

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Check for Changes in Challenges Directory
        id: check_changes
        run: |
          echo "Checking for changes in Challenges directory..."
          git diff --name-only HEAD^ HEAD > changed_files.txt
          if grep -q "^Challenges/" changed_files.txt; then
            echo "::set-output name=changes::true"
          else:
            echo "::set-output name=changes::false"
          fi

      - name: Update Challenge Versions
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "Updating challenge versions..."
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep "^Challenges/")
          for file in $CHANGED_FILES; do
            echo "Updating version for $file"
            python update_version.py $file
          done
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add Challenges/
          git commit -m "Update challenge versions"
          git push

      - name: Create Update Script
        run: |
          echo "import sys
import re

def update_version(file_path):
    with open(file_path, 'r') as file:
        content = file.read()
    version_match = re.search(r'Challenge.VERSION = \"(\d+)\.(\d+)\.(\d+)\"', content)
    if version_match:
        major, minor, patch = map(int, version_match.groups())
        new_version = f'Challenge.VERSION = \"{major}.{minor}.{patch + 1}\"'
        new_content = re.sub(r'Challenge.VERSION = \"\d+\.\d+\.\d+\"', new_version, content)
        with open(file_path, 'w') as file:
            file.write(new_content)
        print(f'Updated {file_path} to {new_version}')
    else:
        print(f'No version found in {file_path}')

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: python update_version.py <file_path>')
    else:
        update_version(sys.argv[1])" > update_version.py
"
